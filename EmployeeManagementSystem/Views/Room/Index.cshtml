@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width">
    <title>Peer-to-Peer Cue System --- Reciever</title>
<style>
    body {
        font-family: 'DejaVu Sans', Arial, Helvetica, sans-serif;
        background-color: white;
        min-width: 450px;
    }

    h1 {
        font-size: 1.75em;
    }

    h2 {
        text-align: center;
        font-size: 4em;
    }

    td {
        width: 50%;
    }

    input {
        margin-bottom: 5px;
    }

    a:visited {
        color: blue;
    }

    .display {
        width: 100%;
        min-height: 400px;
        padding-bottom: 20px;
    }

    .control {
        width: 100%;
        padding-bottom: 20px;
    }

    .control-button {
        width: 100%;
        min-height: 50px;
    }

    .display-box {
        border: 2px solid black;
    }

    .title {
        vertical-align: top;
    }

    .standby {
        background-color: red;
    }

    .go {
        background-color: green;
    }

    .fade {
        background-color: yellow;
    }

    .off {
        background-color: gray;
    }

    .hidden {
        visibility: hidden;
    }

    .no-display {
        display: none;
    }

    .status {
        height: 125px;
        vertical-align: text-top;
        font-weight: bold;
        margin-bottom: 10px;
        border-bottom: 2px solid black;
    }

    .message {
        height: 125px;
        max-height: 125px;
        margin-bottom: 10px;
        border-bottom: 2px solid black;
        overflow: auto;
    }

    .msg-time {
        color: blue;
    }

    .cueMsg {
        color: orange;
    }

    .selfMsg {
        color: green;
    }

    .peerMsg {
        color: red;
    }
</style>
</head>
<body>
    <table class="display">
        <tr>
            <td class="title">Status:</td>
            <td class="title">Messages:</td>
        </tr>
        <tr>
            <td>
                <div id="receiver-id" style="font-weight: bold;" title="Copy this ID to the input on send.html.">ID:</div>
            </td>
            <td>
                <input type="text" id="sendMessageBox" placeholder="Enter a message..." autofocus="true" />
                <button type="button" id="sendButton">Send</button>
                <button type="button" id="clearMsgsButton">Clear Msgs (Local)</button>
            </td>
        </tr>
        <tr>
            <td><div id="status" class="status"></div></td>
            <td><div class="message" id="message"></div></td>
        </tr>
     
    </table>
    <div>
        <video id="localVideo" autoplay muted></video>
        <video id="remoteVideo" autoplay></video>

    </div>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script type="text/javascript">
        (function () {

            var lastPeerId = null;
           
            var conn = null;
            var recvId = document.getElementById("receiver-id");
            var status = document.getElementById("status");
            var message = document.getElementById("message");
            var sendMessageBox = document.getElementById("sendMessageBox");
            var sendButton = document.getElementById("sendButton");
            var clearMsgsButton = document.getElementById("clearMsgsButton");
            var localVideo = document.getElementById("localVideo");
            var remoteVideo = document.getElementById("remoteVideo");

            /**
             * Create the Peer object for our end of the connection.
             *
             * Sets up callbacks that handle any events related to our
             * peer object.
             */
            function initialize() {
                let localStream;
                navigator.mediaDevices.getUserMedia({
                    audio: true,
                    video: true,
                }).then(stream => {
                    // Display your local video in #localVideo element
                    localVideo.srcObject = stream;
                    localStream = stream;
                });
                // Create own peer object with connection to shared PeerJS server
                //peer = new Peer(null, {
                //    debug: 2,
                //    stream: localStream
                //});
                var peer = new Peer({
                    initiator: true,
                    trickle: false,
                    stream: localStream
                })

                peer.on('open', function (id) {
                    // Workaround for peer.reconnect deleting previous id
                    if (peer.id === null) {
                        console.log('Received null id from peer open');
                        peer.id = lastPeerId;
                    } else {
                        lastPeerId = peer.id;
                    }

                    console.log('ID: ' + peer.id);
                    recvId.innerHTML = "ID: " + peer.id;
                    status.innerHTML = "Awaiting connection...";
                });

                peer.on('call', function (call) {
                    // Answer the call, providing our mediaStream
                    call.answer(localStream);
                    call.on('stream', function (stream) {
                        remoteVideo.srcObject = stream;
                        remoteVideo.play();
                    });

                });
                peer.on('connection', function (c) {
                    // Allow only a single connection
                    if (conn && conn.open) {
                        c.on('open', function () {
                            c.send("Already connected to another client");
                            setTimeout(function () { c.close(); }, 500);
                        });
                        return;
                    }

                    conn = c;
                    console.log("Connected to: " + conn.peer);
                    status.innerHTML = "Connected";
                    ready();
                });
                peer.on('stream', function (stream) {
                    console.log("stream")
                    remoteVideo.srcObject = stream
                    remoteVideo.play()
                })
                peer.on('disconnected', function () {
                    status.innerHTML = "Connection lost. Please reconnect";
                    console.log('Connection lost. Please reconnect');

                    // Workaround for peer.reconnect deleting previous id
                    peer.id = lastPeerId;
                    peer._lastServerId = lastPeerId;
                    peer.reconnect();
                });
                peer.on('close', function () {
                    conn = null;
                    status.innerHTML = "Connection destroyed. Please refresh";
                    console.log('Connection destroyed');
                });
                peer.on('error', function (err) {
                    console.log(err);
                    alert('' + err);
                });
            };

            /**
             * Triggered once a connection has been achieved.
             * Defines callbacks to handle incoming data and connection events.
             */
            function ready() {
                conn.on('data', function (data) {
                    console.log("Data recieved");
                   addMessage("<span class=\"peerMsg\">Peer: </span>" + data);
                });
                conn.on('close', function () {
                    status.innerHTML = "Connection reset<br>Awaiting connection...";
                    conn = null;
                });
            }


            function addMessage(msg) {
                var now = new Date();
                var h = now.getHours();
                var m = addZero(now.getMinutes());
                var s = addZero(now.getSeconds());

                if (h > 12)
                    h -= 12;
                else if (h === 0)
                    h = 12;

                function addZero(t) {
                    if (t < 10)
                        t = "0" + t;
                    return t;
                };
                message.innerHTML = "<br><span class=\"msg-time\">" + h + ":" + m + ":" + s + "</span>  -  " + msg + message.innerHTML;
            }


            // Listen for enter in message box
            sendMessageBox.addEventListener('keypress', function (e) {
                var event = e || window.event;
                var char = event.which || event.keyCode;
                if (char == '13')
                    sendButton.click();
            });
            // Send message
            sendButton.addEventListener('click', function () {
                if (conn && conn.open) {
                    var msg = sendMessageBox.value;
                    sendMessageBox.value = "";
                    conn.send(msg);
                    console.log("Sent: " + msg)
                    addMessage("<span class=\"selfMsg\">Self: </span>" + msg);
                } else {
                    console.log('Connection is closed');
                }
            });

            // Clear messages box
            clearMsgsButton.addEventListener('click', clearMessages);

            initialize();
        })();
    </script>
</body>
</html>
